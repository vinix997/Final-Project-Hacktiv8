// Code generated by MockGen. DO NOT EDIT.
// Source: service/comment-service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vinix997/Final-Project-Hacktiv8/entity"
)

// MockCommentService is a mock of CommentService interface.
type MockCommentService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceMockRecorder
}

// MockCommentServiceMockRecorder is the mock recorder for MockCommentService.
type MockCommentServiceMockRecorder struct {
	mock *MockCommentService
}

// NewMockCommentService creates a new mock instance.
func NewMockCommentService(ctrl *gomock.Controller) *MockCommentService {
	mock := &MockCommentService{ctrl: ctrl}
	mock.recorder = &MockCommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentService) EXPECT() *MockCommentServiceMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentService) CreateComment(ctx context.Context, comment *entity.Comment) (*entity.Comment, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment)
	ret0, _ := ret[0].(*entity.Comment)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentServiceMockRecorder) CreateComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentService)(nil).CreateComment), ctx, comment)
}

// DeleteComment mocks base method.
func (m *MockCommentService) DeleteComment(ctx context.Context, id int) (string, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentServiceMockRecorder) DeleteComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentService)(nil).DeleteComment), ctx, id)
}

// GetComment mocks base method.
func (m *MockCommentService) GetComment(ctx context.Context) ([]entity.CommentResponse, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx)
	ret0, _ := ret[0].([]entity.CommentResponse)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockCommentServiceMockRecorder) GetComment(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockCommentService)(nil).GetComment), ctx)
}

// UpdateComment mocks base method.
func (m *MockCommentService) UpdateComment(ctx context.Context, comment *entity.Comment, id int) (*entity.CommentUpdateResponse, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, comment, id)
	ret0, _ := ret[0].(*entity.CommentUpdateResponse)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentServiceMockRecorder) UpdateComment(ctx, comment, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentService)(nil).UpdateComment), ctx, comment, id)
}

// MockCommentRepository is a mock of CommentRepository interface.
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository.
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance.
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentRepository) CreateComment(ctx context.Context, comment *entity.Comment) (*entity.Comment, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment)
	ret0, _ := ret[0].(*entity.Comment)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentRepositoryMockRecorder) CreateComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentRepository)(nil).CreateComment), ctx, comment)
}

// DeleteComment mocks base method.
func (m *MockCommentRepository) DeleteComment(ctx context.Context, id int) (string, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentRepositoryMockRecorder) DeleteComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentRepository)(nil).DeleteComment), ctx, id)
}

// GetComment mocks base method.
func (m *MockCommentRepository) GetComment(ctx context.Context) ([]entity.CommentResponse, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx)
	ret0, _ := ret[0].([]entity.CommentResponse)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockCommentRepositoryMockRecorder) GetComment(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockCommentRepository)(nil).GetComment), ctx)
}

// UpdateComment mocks base method.
func (m *MockCommentRepository) UpdateComment(ctx context.Context, comment *entity.Comment, id int) (*entity.CommentUpdateResponse, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, comment, id)
	ret0, _ := ret[0].(*entity.CommentUpdateResponse)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentRepositoryMockRecorder) UpdateComment(ctx, comment, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentRepository)(nil).UpdateComment), ctx, comment, id)
}
