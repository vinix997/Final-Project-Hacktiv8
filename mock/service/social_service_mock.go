// Code generated by MockGen. DO NOT EDIT.
// Source: service/social-service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vinix997/Final-Project-Hacktiv8/entity"
)

// MockSocialService is a mock of SocialService interface.
type MockSocialService struct {
	ctrl     *gomock.Controller
	recorder *MockSocialServiceMockRecorder
}

// MockSocialServiceMockRecorder is the mock recorder for MockSocialService.
type MockSocialServiceMockRecorder struct {
	mock *MockSocialService
}

// NewMockSocialService creates a new mock instance.
func NewMockSocialService(ctrl *gomock.Controller) *MockSocialService {
	mock := &MockSocialService{ctrl: ctrl}
	mock.recorder = &MockSocialServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSocialService) EXPECT() *MockSocialServiceMockRecorder {
	return m.recorder
}

// CreateSocial mocks base method.
func (m *MockSocialService) CreateSocial(ctx context.Context, Social *entity.SocialMedia) (*entity.SocialMedia, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSocial", ctx, Social)
	ret0, _ := ret[0].(*entity.SocialMedia)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// CreateSocial indicates an expected call of CreateSocial.
func (mr *MockSocialServiceMockRecorder) CreateSocial(ctx, Social interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSocial", reflect.TypeOf((*MockSocialService)(nil).CreateSocial), ctx, Social)
}

// DeleteSocial mocks base method.
func (m *MockSocialService) DeleteSocial(ctx context.Context, id int) (string, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSocial", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// DeleteSocial indicates an expected call of DeleteSocial.
func (mr *MockSocialServiceMockRecorder) DeleteSocial(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSocial", reflect.TypeOf((*MockSocialService)(nil).DeleteSocial), ctx, id)
}

// GetSocial mocks base method.
func (m *MockSocialService) GetSocial(ctx context.Context) (*entity.CustomSocialMediaResponse, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocial", ctx)
	ret0, _ := ret[0].(*entity.CustomSocialMediaResponse)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// GetSocial indicates an expected call of GetSocial.
func (mr *MockSocialServiceMockRecorder) GetSocial(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocial", reflect.TypeOf((*MockSocialService)(nil).GetSocial), ctx)
}

// UpdateSocial mocks base method.
func (m *MockSocialService) UpdateSocial(ctx context.Context, Social *entity.SocialMedia, id int) (*entity.SocialMedia, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSocial", ctx, Social, id)
	ret0, _ := ret[0].(*entity.SocialMedia)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// UpdateSocial indicates an expected call of UpdateSocial.
func (mr *MockSocialServiceMockRecorder) UpdateSocial(ctx, Social, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSocial", reflect.TypeOf((*MockSocialService)(nil).UpdateSocial), ctx, Social, id)
}

// MockSocialRepository is a mock of SocialRepository interface.
type MockSocialRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSocialRepositoryMockRecorder
}

// MockSocialRepositoryMockRecorder is the mock recorder for MockSocialRepository.
type MockSocialRepositoryMockRecorder struct {
	mock *MockSocialRepository
}

// NewMockSocialRepository creates a new mock instance.
func NewMockSocialRepository(ctrl *gomock.Controller) *MockSocialRepository {
	mock := &MockSocialRepository{ctrl: ctrl}
	mock.recorder = &MockSocialRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSocialRepository) EXPECT() *MockSocialRepositoryMockRecorder {
	return m.recorder
}

// CreateSocial mocks base method.
func (m *MockSocialRepository) CreateSocial(ctx context.Context, Social *entity.SocialMedia) (*entity.SocialMedia, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSocial", ctx, Social)
	ret0, _ := ret[0].(*entity.SocialMedia)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// CreateSocial indicates an expected call of CreateSocial.
func (mr *MockSocialRepositoryMockRecorder) CreateSocial(ctx, Social interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSocial", reflect.TypeOf((*MockSocialRepository)(nil).CreateSocial), ctx, Social)
}

// DeleteSocial mocks base method.
func (m *MockSocialRepository) DeleteSocial(ctx context.Context, id int) (string, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSocial", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// DeleteSocial indicates an expected call of DeleteSocial.
func (mr *MockSocialRepositoryMockRecorder) DeleteSocial(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSocial", reflect.TypeOf((*MockSocialRepository)(nil).DeleteSocial), ctx, id)
}

// GetSocial mocks base method.
func (m *MockSocialRepository) GetSocial(ctx context.Context) (*entity.CustomSocialMediaResponse, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocial", ctx)
	ret0, _ := ret[0].(*entity.CustomSocialMediaResponse)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// GetSocial indicates an expected call of GetSocial.
func (mr *MockSocialRepositoryMockRecorder) GetSocial(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocial", reflect.TypeOf((*MockSocialRepository)(nil).GetSocial), ctx)
}

// UpdateSocial mocks base method.
func (m *MockSocialRepository) UpdateSocial(ctx context.Context, Social *entity.SocialMedia, id int) (*entity.SocialMedia, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSocial", ctx, Social, id)
	ret0, _ := ret[0].(*entity.SocialMedia)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// UpdateSocial indicates an expected call of UpdateSocial.
func (mr *MockSocialRepositoryMockRecorder) UpdateSocial(ctx, Social, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSocial", reflect.TypeOf((*MockSocialRepository)(nil).UpdateSocial), ctx, Social, id)
}
